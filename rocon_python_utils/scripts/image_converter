#!/usr/bin/env python
#
# License: BSD
#   https://raw.github.com/robotics-in-concert/rocon_tools/license/LICENSE
#

##############################################################################
# Imports
##############################################################################

import sys
import argparse
import rospy
import cv2
import numpy
import sensor_msgs.msg as sensor_msgs

def parse_arguments():
    parser = argparse.ArgumentParser(description='Relays given topic')
    parser.add_argument('conversion', type=str, help='type of topic being relayed. (none, compressed)')
    myargs = rospy.myargv(argv=sys.argv)
    args = parser.parse_args(args=myargs[1:])
    args.conversion = conversion

    return conversion

def loginfo(msg):
    rospy.loginfo('%s : %s'%(rospy.get_name(), str(msg)))

class Converter(object):
    def __init__(self, conversion):
        self._conversion = conversion

        # Later we may add more conversions
        if self._conversion == "compressed":
            self._sub_img = rospy.Subscriber("image", sensor_msgs.Image, self._relay_to_compress)
            self._pub_new_img = rospy.Publisher("image/compressed", sensor_msgs.CompressedImage, queue_size=1)
        else:
            loginfo("No conversion is specified. Exiting...")

    def _relay_to_compress(self, msg):
        np_arr = numpy.fromstring(msg.data, np.uint8)
        image_np = cv2.imdecode(np_arr, cv2.CV_LOAD_IMAGE_COLOR)
        
        new_msg = CompressedImage()
        msg.header.stamp = rospy.Time.now()
        msg.format = "jpeg"
        msg.data = np.array(cv2.imencode('.jpg', image_np)[1]).tostring()
        self._pub_new_img(msg)

if __name__ == '__main__': 
    rospy.init_node('image_converter')

    conversion  = parse_arguments()

    relay_instance = Converter(conversion)
    rospy.spin()
    loginfo("Bye Bye")
